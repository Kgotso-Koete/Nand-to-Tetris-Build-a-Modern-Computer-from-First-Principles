// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard 
{
    /** Initializes the keyboard. */
    function void init() 
    {
        return;
    } 

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() 
    {
        var char key;
        let key = Memory.peek(24576);
        if (key)  
        {
            return key; 
        } 
        else       
        {
            return 0;
        }
    }

    /**								
     * Waits until a key is pressed on the keyboard and released,
     * then echoes the key to the screen, and returns the character 
     * of the pressed key.
     */
     function char readChar() 
     {
        var char key, c;
        let key = 0;

        // display the cursor 
        // while no key is pressed on the keyboard
        while (key = 0) 
        {
            // do nothing // wait till a key is pressed
            let key = Keyboard.keyPressed();
        }
        // c = code of currently pressed key
        let c = key;
        // while a key is pressed
        while(key > 0) 
        {
            // do nothing // wait for the user to let go 
            let key = Keyboard.keyPressed();
        }
        // print c at the current cursor location 
        do Output.backSpace();
        do Output.printChar(c);
        // move the cursor one position to the right 
        do Output.printChar(0); 
        // return c
        return c; 
     }

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its value. Also handles user backspaces.
     */
     function String readLine(String message) 
     {
        var String s;
        var char c;
        do Output.printString(message);  
    
        // s = empty string
        let s = String.new(80);   
        
        while(~(c = 128))
        {
            // c = readChar() 
            let c = Keyboard.readChar();
            // if c = newline character
            if (c = 128)
            {
                // print newline
                do Output.println();
                // return s
                return s;
            }
            else 
            { 
                // if c = backspace character 
                if(c = 129)
                {
                    // remove last character from s
                    do s.eraseLastChar();
                    // move the cursor 1 position back 
                    do Output.backSpace();
                }
                else 
                {
                    // s = s.append(c)
                    do s.appendChar(c);
                }
            }
        }
    
        return s;

     }   

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its integer value (until the first non-digit character in the
     * entered text is detected). Also handles user backspaces. 
     */
     function int readInt(String message) 
     {
        var String s;
        var char c;
        do Output.printString(message);  
    
        // s = empty string
        let s = String.new(80);   
        
        while(~(c = 128))
        {
            // c = readChar() 
            let c = Keyboard.readChar();
            // if c = newline character
            if (c = 128)
            {
                // print newline
                do Output.println();
                // return s (interger value)
                return s.intValue();
            }
            else 
            { 
                // if c = backspace character 
                if(c = 129)
                {
                    // remove last character from s
                    do s.eraseLastChar();
                    // move the cursor 1 position back 
                    do Output.backSpace();
                }
                else  
                {
                    // s = s.append(c)
                    do s.appendChar(c);
                }   
            }
        }
          
        return s;
     }
}
