// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length;
    field int max;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) 
    {
        if(maxLength < 1)
        {
            let str = Array.new(1);
        }
        else 
        {
            let str = Array.new(maxLength);
        }
        let length = 0;
        let max = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() 
    {
        do Memory.deAlloc(this); 
        return; 
    }

    /** Returns the current length of this string. */
    method int length() 
    {
        return length; 
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) 
    {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) 
    {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) 
    {
        if(length < max) 
        {
            let str[length] = c;
            let length = length + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() 
    {
        let str[length - 1] = 32;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() 
    {
        var int i, d;
        var int result;
        let result = 0;

        if(str[0] = 45 )
        {
            let i = 1;
            while(i < length)
            {
                let d = (str[i] - 48) ;
                let result = (result * 10) + d;
                let i = i + 1;
            }
            let result = result * (-1);
        }
        else 
        {
            let i = 0;
            while(i < length)
            {
                let d = (str[i] - 48) ;
                let result = (result * 10) + d;
                let i = i + 1;
            }
        }

        
        return result;
    }
    
    function int modulo(int a, int b)
    {
        // with hep from: https://stackoverflow.com/a/2661001
        return a - (b * (a / b)); 
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int n) 
    {
        // with help from: http://www.learntosolveit.com/cprogramming/Ex_4.12_recursive_itoa.html
        var int lastDigit;
    
        if(n / 10)    
        {  
            do setInt(n / 10);
        } 
        else 
        {
            let length = 0;  
            if(n < 0)
            {
                let str[0] = 45;
                let length = length + 1;
            }
        }
        
        let n = Math.abs(n);
        let lastDigit = String.modulo(n, 10);
        let str[length] = (lastDigit + 48);
        let length = length + 1;
        return;
    
    }

    /** Returns the new line character. */
    function char newLine() 
    {
        // new line = 128 = String.newline()
        var char c;
        let c = 128;
        return c;
    }

    /** Returns the backspace character. */
    function char backSpace() 
    {
        // backspace = 129 = String.backspace()
        var char c;
        let c = 129;
        return c;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() 
    {
        // double quote = 34 = String.doubleQuote()
        var char c; 
        let c = 34;
        return c;
    }
}
