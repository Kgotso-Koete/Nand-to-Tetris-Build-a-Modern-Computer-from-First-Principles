// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math   
{
    static Array twoToThe;

    function void init() 
    {
        var int i, n;     
        let twoToThe = Array.new(16); 
        let i = 0;

        let n = 1;
        while (i < 16)           
        {
            let twoToThe[i] = Math.abs(n);
            let n = Math.abs(n + n); 
            let i = i + 1; 
        }
        return;    
    }  

    function int bit(inx x, int i) 
    {
        // test if a number has bit i set by ANDing it with twoToThe[i]
        var boolean test;
        var int result;
        let test = x & twoToThe[i];     

        if(test = twoToThe[i]) 
        {
            return 1;
        }
        else
        {
            return 0; 
        }   
    }
 
    /** Returns the absolute value of x. */
    function int abs(int x) 
    {
        if( x > -1)
        {
            return x; 
        }
        else 
        {
            return -x;
        } 
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) 
    {
        var int sum, shiftedX, j;

        let sum = 0;
        let shiftedX = x;
        let j = 0;

        while(j < 16) //for j = 0...(n âˆ’1) do   
        {
            if ( Math.bit(y, j) = 1) //if (j-th bit of y) = 1 then
            {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX; 

            let j = j + 1;    
        }     
        return sum;         
    }  


    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */

    // with help from: http://www.marksmath.com/tecs/signed-overflow/overflow5.html
    function int divide(int x, int y) 
    {
        var boolean neg;
        if (y=0) 
        {
            do Sys.error(3); 
        }
        let neg = ~((x<0) = (y<0));
        if (y = (32767+1)) 
        {    // -32768
            if (x = y) 
            {
                return 1;
            } 
            else 
            {
                return 0; 
            }
        }
        let x = Math.div(Math.abs(x), Math.abs(y));
        if (neg) 
        {
            return -x; 
        }
        return x;
    }

    /** Returns the integer part of x/y, x>=0, y>0. */
    function int div(int x, int y) 
    {
        var int q, qy, xm1, ym1;
        let xm1 = x-1;      // Using x-1 and y-1 in comparisons instead of
        let ym1 = y-1;      // x and y treats -32768 as 32768.
        if ( (ym1 < 0 ) | (ym1 > xm1) ) 
        {
            // y <= 0 occurs when 2y overflows in the recursive div() call.
            return 0; 
        }
        let q = Math.div(x, y+y);
        let qy = q*y;
        if ((xm1-(qy+qy)) < ym1)
        {
            return q+q; 
        }
        return q+q+1;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int N) 
    {
        // with help from: https://stackoverflow.com/a/12132510 
        var int a, b, N;
        let a = 1;
        let b = N;

        while ( Math.abs(a - b) > 1)
        {
            let b = N / a;
            let a = (a + b) / 2; 
        }
        return Math.abs(a);  
    }

    /** Returns the greater number. */
    function int max(int a, int b) 
    {
        if (a > b)
        {
            return a; 
        }
        else
        {
            return b;  
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) 
    {
        if (a < b)
        {
            return a;
        }
        else
        {
            return b; 
        }
    }

}
