// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
   // if (zx == 1) set x = 0 // 16-bit constant 
   Mux16(a=x, b=false, sel=zx, out=Xzero); 

   // if (nx == 1) set x = !x // bitwise not
   Not16(in=Xzero, out=NOTx);
   Mux16(a=Xzero, b=NOTx, sel=nx, out=NOTX);  

   // if (zy == 1) set y = 0 // 16-bit constant
   Mux16(a=y, b=false, sel=zy, out=Yzero);   

   // if (ny == 1) set y = !y // bitwise not
   Not16(in=Yzero, out=NOTy); 
   Mux16(a=Yzero, b=NOTy, sel=ny, out=NOTY);  
   
   // integer 2's complement addition
   Add16(a=NOTX, b=NOTY, out=xADDy);
   // bitwise x and y
   And16(a=NOTX, b=NOTY, out=xANDy);

   // if (f == 1)  set out = x + y  // integer 2's complement addition
   // if (f == 0)  set out = x & y  // bitwise and
   Mux16(a=xANDy, b=xADDy, sel=f, out=Fxy);  
   
   // if (no == 1) set out = !out // bitwise not
   Not16(in=Fxy, out=NotFxy);
   Mux16(a=Fxy, b=NotFxy, sel=no, out[0..7]=outNO1, out[8..15]=outNO2, out[15]=outNO3, out=out);  

   // if (out == 0) set zr = 1
   Or8Way(in=outNO1, out=out8WAY1); // test if any of the out (first 8 bits) has a 1 
   Or8Way(in=outNO2, out=out8WAY2); // test if any of the out (second 8 bits) has a 1 
   Or(a=out8WAY1, b=out8WAY2, out=Or16Way); // test if any of the out (16 bits) has a 1
   Not(in=Or16Way, out=zr); // if al is zero, negate and send as input into zr
   //Not16(in=outORzero, out=zr[15]); // test if output is zero by NOR gate (made of OR and NOT)

   // if (out < 0) set ng = 1
   Or(a=outNO3, b=false, out=ng);  



}