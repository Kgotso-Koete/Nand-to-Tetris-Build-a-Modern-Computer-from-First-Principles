// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
    // select which 8-bit RAM chip should have a load change
    DMux8Way(in=load, sel=address[0..2], a=load1, b=load2, c=load3, d=load4, e=load5, f=load6, g=load7, h=load8); 

    // select which 8-bit RAM chip should broadcast to 'out'
    Mux8Way16(a=register1, b=register2, c=register3, d=register4, e=register5, f=register6, g=register7, h=register8, sel=address[0..2], out=out);
    
    // feed 'in' to all 8-bit RAM chips but only feed it the load if the unique chip has been selected 
    RAM8(in=in, load=load1, address=address[3..5], out=register1);
    RAM8(in=in, load=load2, address=address[3..5], out=register2);
    RAM8(in=in, load=load3, address=address[3..5], out=register3);
    RAM8(in=in, load=load4, address=address[3..5], out=register4);
    RAM8(in=in, load=load5, address=address[3..5], out=register5);   
    RAM8(in=in, load=load6, address=address[3..5], out=register6);
    RAM8(in=in, load=load7, address=address[3..5], out=register7);
    RAM8(in=in, load=load8, address=address[3..5], out=register8); 
  
}